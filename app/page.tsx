/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/nBiMnVrAaMP
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import Image from "next/image";

export default function MainPage() {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [names, setNames] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPdfUrl, setGeneratedPdfUrl] = useState(null);
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
      const formData = new FormData();
      formData.append("template", file);
      console.log("Uploading file to API...");
      try {
        const response = await fetch("/api/upload", {
          method: "POST",
          body: formData
        });
        const data = await response.json();
        console.log(data.message);
        setUploadedFile(data.filename);
      } catch (error) {
        console.error("Error uploading file:", error);
      }
    }
  };
  const handleNamesChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    setNames(event.target.value);
  };
  const generatePdf = async () => {
    setIsGenerating(true);
    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          templateFilename: uploadedFile,
          data: names.split("\n").map(name => ({ name: { text: name } })),
          positions: {
            name: { x: 0.5, y: 0.5, fontSize: 3 } // Adjust as needed
          }
        })
      });
      const data = await response.json();
      setGeneratedPdfUrl(data.outputPath);
      setIsGenerating(false);
    } catch (error) {
      console.error("Error generating PDF:", error);
      setIsGenerating(false);
    }
  };
  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <h1 className="text-2xl font-bold">Cert Generator Again</h1>
      </header>
      <main className="flex-1 grid grid-cols-2 gap-6 p-6">
        <div className="bg-card p-4 rounded-lg shadow">
          <h2 className="text-lg font-medium mb-4">Certificate Preview</h2>
          {uploadedFile ? (
            <div className="relative">
              <Image
                src="/placeholder.svg"
                alt="Certificate Template"
                layout="responsive"
                width={500} // specify the width
                height={300} // specify the height
              />
              {names.split("\n").map((name, index) => (
                <div
                  key={index}
                  className="absolute"
                  style={{
                    left: "50%",
                    top: "50%",
                    transform: "translate(-50%, -50%)",
                    fontSize: "24px",
                    fontWeight: "bold"
                  }}>
                  {name}
                </div>
              ))}
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-muted-foreground bg-muted rounded-lg">
              <label htmlFor="file-upload" className="cursor-pointer">
                <div className="flex items-center justify-center space-x-2">
                  <UploadIcon className="h-6 w-6" />
                  <span>Choose File</span>
                </div>
                <input
                  id="file-upload"
                  type="file"
                  onChange={handleFileUpload}
                  className="sr-only"
                />
              </label>
            </div>
          )}
        </div>
        <div className="bg-card p-4 rounded-lg shadow">
          <h2 className="text-lg font-medium mb-4">Name Entry</h2>
          <Textarea
            value={names}
            onChange={handleNamesChange}
            placeholder="Enter names, one per line"
            className="w-full h-64 resize-none"
          />
          <div className="flex justify-end mt-4">
            <Button
              onClick={generatePdf}
              disabled={!uploadedFile || isGenerating}>
              {isGenerating ? "Generating..." : "Generate PDF"}
            </Button>
          </div>
        </div>
      </main>
      {generatedPdfUrl && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-lg font-medium mb-4">PDF Generated</h2>
            <iframe
              src={generatedPdfUrl}
              width="100%"
              height="600"
              title="Generated PDF"
            />
            <div className="flex justify-end mt-4">
              <Button onClick={() => setGeneratedPdfUrl(null)}>Close</Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function UploadIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>
  );}